{{- $tlsEnabled := .Values.tls.enabled -}}
{{- if .Values.global -}}
{{- if .Values.global.tlsEnabled -}}
{{ $tlsEnabled = true }}
{{- end }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "argo-item-recommender-user-workflow"
data:
  application.yaml: |-
    apiVersion: argoproj.io/v1alpha1
    kind: Workflow
    metadata:
      generateName: item-recommender-user-
      labels:
        workflows.argoproj.io/controller-instanceid: "{{`{{INSTANCEID}}`}}"
        jobRunId: "{{`{{JOB_RUN_ID}}`}}"
        jobConfigId: "{{`{{JOB_CONFIG_ID}}`}}"
    spec:
{{- if .Values.securityContext }}
      securityContext:
{{- .Values.securityContext | toYaml | nindent 8 }}
{{- end }}
      serviceAccountName: "{{`{{SERVICE_ACCOUNT}}`}}"
      entrypoint: workflow
      imagePullSecrets:
      {{ .Values.image.imagePullSecrets| toYaml | nindent 8 }}

      volumeClaimTemplates:
        - metadata:
            name: workspace
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 25Gi

      volumes:
      # This secret is set by Fusion cluster installation scripts / cluster administrator
      - name: secrets
        projected:
          sources:
          - secret:
              name: service-account-key
              items:
                - key: sa
                  path: service-account-key
{{- if $tlsEnabled }}
      - name: fusion-truststore
        secret:
          secretName: fusion-truststore
{{- end }}
      - name: cloud-secret
        secret:
          secretName: {{`{{CLOUD_SECRET}}`}}

      # Global parameters
      arguments:
        parameters:
        - name: cloud_secret
          value: "{{`{{CLOUD_SECRET}}`}}"

        - name: job_run_id
          value: "{{`{{JOB_RUN_ID}}`}}"

        - name: item_metadata_collection
          value: "{{`{{ITEM_METADATA_COLLECTION}}`}}"

        - name: delete_old_recs
          value: "{{`{{DELETE_OLD_RECS}}`}}"

        - name: user_topk
          value: "{{`{{USER_TOPK}}`}}"

        - name: item_topk
          value: "{{`{{ITEM_TOPK}}`}}"

          # Configuration JSON passed to Python model training
          # Required.
        - name: config_json
          value: |-
           {{`{{CONFIG_JSON}}`}}

        - name: config_io_json
          value: |-
           {{`{{CONFIG_IO_JSON}}`}}

        - name: delete_exclude_query
          value: "{{`{{EXCLUDE_FROM_DELETE_FILTER}}`}}"

          # Hostname of Zookeeper
        - name: zkhost
          value: "{{`{{ZOOKEEPER}}`}}"

        - name: docker_repo
          value: "{{ .Values.image.repository }}"

        - name: image_pull_policy
          value: "{{ .Values.image.imagePullPolicy }}"

        - name: ambassador_endpoint
          # this should be templated in by Helm chart to ambassador release name
          value: "{{`{{AMBASSADOR}}`}}"

        - name: namespace
          value: "{{ .Release.Namespace }}"

        - name: spark_solr_tag
          value: "{{`{{sparkSolrEtl}}`}}"

        - name: rec_tag
          value: "{{ .Values.image.recTag | default .Values.image.tag }}"

      templates:
      - name: workflow
        steps:


        ############################################################################################
        # init-workspace: Initializes directory structure for mounted volume
        ############################################################################################
        - - name: init-workspace
            template: init-workspace

        ############################################################################################
        # write-configs: Write JSON from config_json parameter to file.
        ############################################################################################
        - - name: write-job-configs
            template: write-job-configs
        - - name: write-io-configs
            template: write-io-configs
        - - name: add-zkHost
            template: add-zkHost

        ############################################################################################
        # pull-data: Pulls data from Solr into parquet files.
        ############################################################################################
        - - name: pull-data-training-and-metadata
            template: pull-data-training-and-metadata
            when: "\"{{`{{workflow.parameters.cloud_secret}}`}}\" == \"\""
        - - name: pull-data-training-and-metadata-cloud
            template: pull-data-training-and-metadata-cloud
            when: "\"{{`{{workflow.parameters.cloud_secret}}`}}\" != \"\""

        ############################################################################################
        # train: Train model.
        ############################################################################################
        - - name: train-with-metadata
            template: train-with-metadata
            when: "{{`\"{{workflow.parameters.item_metadata_collection}}\" != \"\"`}}"
        - - name: train-without-metadata
            template: train-without-metadata
            when: "{{`\"{{workflow.parameters.item_metadata_collection}}\" == \"\"`}}"

        ############################################################################################
        # push: Push matrices to solr
        ############################################################################################
        - - name: push-recommendations
            template: push-recommendations
            when: "{{`(({{workflow.parameters.user_topk}} > 0) || ({{workflow.parameters.item_topk}} > 0)) && (\"{{workflow.parameters.cloud_secret}}\" == \"\")`}}"
        - - name: push-recommendations-cloud
            template: push-recommendations-cloud
            when: "{{`(({{workflow.parameters.user_topk}} > 0) || ({{workflow.parameters.item_topk}} > 0)) && (\"{{workflow.parameters.cloud_secret}}\" != \"\")`}}"

        ############################################################################################
        # add-default-exclude-query: Add default exclude_query if required
        ############################################################################################
        - - name: add-default-exclude-query
            template: add-default-exclude-query
            when: "{{`({{workflow.parameters.delete_old_recs}} == true) && (\"{{workflow.parameters.delete_exclude_query}}\" == \"\")`}}"

        ############################################################################################
        # delete-old-recs: Delete old recommendations.
        ############################################################################################
        - - name: delete-old-recommendations
            template: delete-old-recommendations
            when: "{{`{{workflow.parameters.delete_old_recs}} == true`}}"

      - name: init-workspace
        nodeSelector:
          {{ .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
          {{ .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          # Using fusion-recommender image to make sure the right user is used
          image: "{{`{{workflow.parameters.docker_repo}}`}}/fusion-recommender:{{`{{workflow.parameters.rec_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.default  | toYaml | nindent 12  }}

          command: [sh, -c]
          args: ["mkdir -p /workspace/configs /workspace/data /workspace/input /workspace/models /workspace/output"]
          volumeMounts:
          - name: workspace
            mountPath: /workspace

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: write-job-configs
        nodeSelector:
          {{ .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
          {{ .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          # Using fusion-recommender image to make sure the right user is used
          image: "{{`{{workflow.parameters.docker_repo}}`}}/fusion-recommender:{{`{{workflow.parameters.rec_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.default  | toYaml | nindent 12  }}

          command: [sh, -c]
          args: ["echo '{{`{{workflow.parameters.config_json}}`}}' > /workspace/configs/config.json; cat /workspace/configs/config.json; ls -lr /workspace"]

          volumeMounts:
          - name: workspace
            mountPath: /workspace

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: write-io-configs
        nodeSelector:
          {{ .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
          {{ .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          # Using fusion-recommender image to make sure the right user is used
          image: "{{`{{workflow.parameters.docker_repo}}`}}/fusion-recommender:{{`{{workflow.parameters.rec_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.default  | toYaml | nindent 12  }}

          command: [sh, -c]
          args: ["echo '{{`{{workflow.parameters.config_io_json}}`}}' > /workspace/configs/io_config.json; cat /workspace/configs/io_config.json; ls -lr /workspace"]

          volumeMounts:
          - name: workspace
            mountPath: /workspace

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: add-zkHost
        nodeSelector:
          {{ .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
          {{ .Values.tolerations.default | toYaml | nindent 10  }}
        script:
          # Using fusion-recommender image to make sure the right user is used
          image: "{{`{{workflow.parameters.docker_repo}}`}}/fusion-recommender:{{`{{workflow.parameters.rec_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.default  | toYaml | nindent 12  }}

          command: [python]
          source: |
            import json
            with open('/workspace/configs/io_config.json', 'r') as f:
                data = json.load(f)
            keys = ['pullConfig', 'pushConfig', 'removeConfig']
            for key in keys:
                if key in data:
                    for config in data[key]:
                        config['zkHost'] = "{{`{{workflow.parameters.zkhost}}`}}"
            with open('/workspace/configs/io_config.json', 'w') as f:
                json.dump(data, f)

          volumeMounts:
          - name: workspace
            mountPath: /workspace

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"


      - name: pull-data-training-and-metadata
        nodeSelector:
          {{ .Values.nodeSelector.user.etl | default .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
          {{ .Values.tolerations.user.etl | default .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          image: "{{`{{workflow.parameters.docker_repo}}`}}/spark-solr-etl:{{`{{workflow.parameters.spark_solr_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.user.etl | default .Values.resources.default | toYaml | nindent 12  }}

          args: ["pull",
                 "/workspace/configs/io_config.json",
                 "/workspace/input/agg_signals.parquet",
                 "/workspace/input/item_metadata.parquet"
          ]

{{- if $tlsEnabled }}
          env:
            - name: "JAVA_TOOL_OPTIONS"
              value: "-Djavax.net.ssl.trustStore=/etc/ssl/truststore/truststore.jks -Djavax.net.ssl.trustStorePassword={{ .Values.tls.keystorePassword }} -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=/etc/ssl/truststore/keystore.jks -Dzookeeper.ssl.trustStore.location=/etc/ssl/truststore/truststore.jks -Dzookeeper.ssl.keyStore.password={{ .Values.tls.keystorePassword }} -Dzookeeper.ssl.trustStore.password={{ .Values.tls.keystorePassword }}"
{{- end }}
          volumeMounts:
{{- if $tlsEnabled }}
          - name: "fusion-truststore"
            mountPath: "/etc/ssl/truststore"
{{ end }}
          - name: workspace
            mountPath: /workspace

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: pull-data-training-and-metadata-cloud
        nodeSelector:
          {{ .Values.nodeSelector.user.etl | default .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
          {{ .Values.tolerations.user.etl | default .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          image: "{{`{{workflow.parameters.docker_repo}}`}}/spark-solr-etl:{{`{{workflow.parameters.spark_solr_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.user.etl | default .Values.resources.default | toYaml | nindent 12  }}

          args: ["pull",
                 "/workspace/configs/io_config.json",
                 "/workspace/input/agg_signals.parquet",
                 "/workspace/input/item_metadata.parquet"
          ]

{{- if $tlsEnabled }}
          env:
            - name: "JAVA_TOOL_OPTIONS"
              value: "-Djavax.net.ssl.trustStore=/etc/ssl/truststore/truststore.jks -Djavax.net.ssl.trustStorePassword={{ .Values.tls.keystorePassword }} -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=/etc/ssl/truststore/keystore.jks -Dzookeeper.ssl.trustStore.location=/etc/ssl/truststore/truststore.jks -Dzookeeper.ssl.keyStore.password={{ .Values.tls.keystorePassword }} -Dzookeeper.ssl.trustStore.password={{ .Values.tls.keystorePassword }}"
{{- end }}
          volumeMounts:
{{- if $tlsEnabled }}
          - name: "fusion-truststore"
            mountPath: "/etc/ssl/truststore"
{{ end }}
          - name: workspace
            mountPath: /workspace

          - name: cloud-secret
            mountPath: "/etc/secrets"
            readOnly: true

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: train-with-metadata
        nodeSelector:
          {{ .Values.nodeSelector.user.train | default .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
          {{ .Values.tolerations.user.train | default .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          image: "{{`{{workflow.parameters.docker_repo}}`}}/fusion-recommender:{{`{{workflow.parameters.rec_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.user.train | default .Values.resources.default | toYaml | nindent 12  }}

          args: ["run_user_item",
                 "{{`{{workflow.parameters.job_run_id}}`}}",
                 "/src/working_dir/configs/config.json",
                 "agg_signals.parquet",
                 "item_metadata.parquet"
          ]

          volumeMounts:
          - name: workspace
            mountPath: /src/working_dir

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: train-without-metadata
        nodeSelector:
          {{ .Values.nodeSelector.user.train | default .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
          {{ .Values.tolerations.user.train | default .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          image: "{{`{{workflow.parameters.docker_repo}}`}}/fusion-recommender:{{`{{workflow.parameters.rec_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.user.train | default .Values.resources.default | toYaml | nindent 12  }}

          args: ["run_user_item",
                 "{{`{{workflow.parameters.job_run_id}}`}}",
                 "/src/working_dir/configs/config.json",
                 "agg_signals.parquet"
          ]

          volumeMounts:
          - name: workspace
            mountPath: /src/working_dir

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: push-recommendations
        nodeSelector:
          {{ .Values.nodeSelector.user.etl | default .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
          {{ .Values.tolerations.user.etl | default .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          image: "{{`{{workflow.parameters.docker_repo}}`}}/spark-solr-etl:{{`{{workflow.parameters.spark_solr_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.user.etl | default .Values.resources.default | toYaml | nindent 12  }}

          args: ["push",
                 "/workspace/configs/io_config.json",
                 "/workspace/output/user_item_recommendations.parquet",
                 "/workspace/output/item_item_recommendations.parquet"
          ]
{{- if $tlsEnabled }}
          env:
            - name: "JAVA_TOOL_OPTIONS"
              value: "-Djavax.net.ssl.trustStore=/etc/ssl/truststore/truststore.jks -Djavax.net.ssl.trustStorePassword={{ .Values.tls.keystorePassword }} -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=/etc/ssl/truststore/keystore.jks -Dzookeeper.ssl.trustStore.location=/etc/ssl/truststore/truststore.jks -Dzookeeper.ssl.keyStore.password={{ .Values.tls.keystorePassword }} -Dzookeeper.ssl.trustStore.password={{ .Values.tls.keystorePassword }}"
{{- end }}
          volumeMounts:
{{- if $tlsEnabled }}
          - name: "fusion-truststore"
            mountPath: "/etc/ssl/truststore"
{{ end }}
          - name: workspace
            mountPath: /workspace
        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: push-recommendations-cloud
        nodeSelector:
          {{ .Values.nodeSelector.user.etl | default .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
          {{ .Values.tolerations.user.etl | default .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          image: "{{`{{workflow.parameters.docker_repo}}`}}/spark-solr-etl:{{`{{workflow.parameters.spark_solr_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.user.etl | default .Values.resources.default | toYaml | nindent 12  }}

          args: ["push",
                 "/workspace/configs/io_config.json",
                 "/workspace/output/user_item_recommendations.parquet",
                 "/workspace/output/item_item_recommendations.parquet"
          ]
{{- if $tlsEnabled }}
          env:
            - name: "JAVA_TOOL_OPTIONS"
              value: "-Djavax.net.ssl.trustStore=/etc/ssl/truststore/truststore.jks -Djavax.net.ssl.trustStorePassword={{ .Values.tls.keystorePassword }} -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=/etc/ssl/truststore/keystore.jks -Dzookeeper.ssl.trustStore.location=/etc/ssl/truststore/truststore.jks -Dzookeeper.ssl.keyStore.password={{ .Values.tls.keystorePassword }} -Dzookeeper.ssl.trustStore.password={{ .Values.tls.keystorePassword }}"
{{- end }}
          volumeMounts:
{{- if $tlsEnabled }}
          - name: "fusion-truststore"
            mountPath: "/etc/ssl/truststore"
{{ end }}
          - name: workspace
            mountPath: /workspace

          - name: cloud-secret
            mountPath: "/etc/secrets"
            readOnly: true
        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: add-default-exclude-query
        nodeSelector:
          {{ .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
          {{ .Values.tolerations.default | toYaml | nindent 10 }}
        script:
          # Using fusion-recommender image to make sure the right user is used
          image: "{{`{{workflow.parameters.docker_repo}}`}}/fusion-recommender:{{`{{workflow.parameters.rec_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.default | toYaml | nindent 12  }}

          command: [python]
          source: |
            import json
            with open('/workspace/configs/io_config.json', 'r') as f:
                data = json.load(f)
            for config in data["removeConfig"]:
              config["excludeQuery"] = "jobId:{{`{{workflow.parameters.job_run_id}}`}}"
            with open('/workspace/configs/io_config.json', 'w') as f:
                json.dump(data, f)

          volumeMounts:
          - name: workspace
            mountPath: /workspace

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: delete-old-recommendations
        nodeSelector:
          {{ .Values.nodeSelector.user.etl | default .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
          {{ .Values.tolerations.user.etl | default .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          image: "{{`{{workflow.parameters.docker_repo}}`}}/spark-solr-etl:{{`{{workflow.parameters.spark_solr_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.default | toYaml | nindent 12  }}

          args: ["remove",
                 "/workspace/configs/io_config.json",
          ]
{{- if $tlsEnabled }}
          env:
            - name: "JAVA_TOOL_OPTIONS"
              value: "-Djavax.net.ssl.trustStore=/etc/ssl/truststore/truststore.jks -Djavax.net.ssl.trustStorePassword={{ .Values.tls.keystorePassword }} -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=/etc/ssl/truststore/keystore.jks -Dzookeeper.ssl.trustStore.location=/etc/ssl/truststore/truststore.jks -Dzookeeper.ssl.keyStore.password={{ .Values.tls.keystorePassword }} -Dzookeeper.ssl.trustStore.password={{ .Values.tls.keystorePassword }}"
{{ end }}
          volumeMounts:
          - name: workspace
            mountPath: /workspace
{{- if $tlsEnabled }}
          - name: "fusion-truststore"
            mountPath: "/etc/ssl/truststore"
{{ end }}

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "argo-item-recommender-content-workflow"
data:
  application.yaml: |-
    apiVersion: argoproj.io/v1alpha1
    kind: Workflow
    metadata:
      generateName: item-recommender-content-
      labels:
        workflows.argoproj.io/controller-instanceid: "{{`{{INSTANCEID}}`}}"
        jobRunId: "{{`{{JOB_RUN_ID}}`}}"
        jobConfigId: "{{`{{JOB_CONFIG_ID}}`}}"
    spec:
{{- if .Values.securityContext }}
      securityContext:
{{- .Values.securityContext | toYaml | nindent 8 }}
{{- end }}
      serviceAccountName: "{{`{{SERVICE_ACCOUNT}}`}}"
      entrypoint: workflow
      imagePullSecrets:
      {{ .Values.image.imagePullSecrets| toYaml | nindent 8 }}

      volumeClaimTemplates:
        - metadata:
            name: workspace
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 25Gi

      volumes:
      # This secret is set by Fusion cluster installation scripts / cluster administrator
      - name: secrets
        projected:
          sources:
          - secret:
              name: service-account-key
              items:
                - key: sa
                  path: service-account-key
{{- if $tlsEnabled }}
      - name: fusion-truststore
        secret:
          secretName: fusion-truststore
{{- end }}
      - name: cloud-secret
        secret:
          secretName: {{`{{CLOUD_SECRET}}`}}

      # Global parameters
      arguments:
        parameters:
        - name: cloud_secret
          value: "{{`{{CLOUD_SECRET}}`}}"

        - name: job_run_id
          value: "{{`{{JOB_RUN_ID}}`}}"

        - name: delete_old_recs
          value: "{{`{{DELETE_OLD_RECS}}`}}"

          # Configuration JSON passed to Python model training
          # Required.
        - name: config_json
          value: |-
           {{`{{CONFIG_JSON}}`}}

        - name: config_io_json
          value: |-
           {{`{{CONFIG_IO_JSON}}`}}

        - name: delete_exclude_query
          value: "{{`{{EXCLUDE_FROM_DELETE_FILTER}}`}}"

          # Hostname of Zookeeper
        - name: zkhost
          value: "{{`{{ZOOKEEPER}}`}}"

        - name: docker_repo
          value: "{{ .Values.image.repository }}"

        - name: image_pull_policy
          value: "{{ .Values.image.imagePullPolicy }}"

        - name: ambassador_endpoint
          # this should be templated in by Helm chart to ambassador release name
          value: "{{`{{AMBASSADOR}}`}}"

        - name: namespace
          value: "{{ .Release.Namespace }}"

        - name: spark_solr_tag
          value: "{{`{{sparkSolrEtl}}`}}"

        - name: rec_tag
          value: "{{ .Values.image.recTag | default .Values.image.tag }}"

      templates:
      - name: workflow
        steps:

        ############################################################################################
        # init-workspace: Initializes directory structure for mounted volume
        ############################################################################################
        - - name: init-workspace
            template: init-workspace

        ############################################################################################
        # copy-model: Copies the USE model from docker image to the persistent volume for later use
        ############################################################################################
        - - name: copy-model
            template: copy-model

          ############################################################################################
          # write-configs: Write JSON from config_json parameter to file.
          ############################################################################################
        - - name: write-job-configs
            template: write-job-configs
        - - name: write-io-configs
            template: write-io-configs
        - - name: add-zkHost
            template: add-zkHost

          ############################################################################################
          # pull-data: Pulls data from Solr into parquet files.
          ############################################################################################
        - - name: pull-data
            template: pull-data
            when: "\"{{`{{workflow.parameters.cloud_secret}}`}}\" == \"\""
        - - name: pull-data-cloud
            template: pull-data-cloud
            when: "\"{{`{{workflow.parameters.cloud_secret}}`}}\" != \"\""
        
        ############################################################################################
        # train: Train model.
        ############################################################################################
        - - name: train
            template: train

        ############################################################################################
        # push: Push matrices to solr
        ############################################################################################
        - - name: push-content
            template: push-content
            when: "{{`\"{{workflow.parameters.cloud_secret}}\" == \"\"`}}"
        - - name: push-content-cloud
            template: push-content-cloud
            when: "{{`\"{{workflow.parameters.cloud_secret}}\" != \"\"`}}"

        ############################################################################################
        # add-default-exclude-query: Add default exclude_query if required
        ############################################################################################
        - - name: add-default-exclude-query
            template: add-default-exclude-query
            when: "{{`({{workflow.parameters.delete_old_recs}} == true) && (\"{{workflow.parameters.delete_exclude_query}}\" == \"\")`}}"

        ############################################################################################
        # delete-old-recs: Delete old recommendations.
        ############################################################################################
        - - name: delete-old-content-recommendations
            template: delete-old-content-recommendations
            when: "{{`{{workflow.parameters.delete_old_recs}} == true`}}"

      - name: init-workspace
        nodeSelector:
         {{ .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
         {{ .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          # Using fusion-recommender image to make sure the right user is used
          image: "{{`{{workflow.parameters.docker_repo}}`}}/fusion-recommender:{{`{{workflow.parameters.rec_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.default | toYaml | nindent 12  }}

          command: [sh, -c]
          args: ["mkdir -p /workspace/configs /workspace/data /workspace/input /workspace/models /workspace/output"]
          volumeMounts:
          - name: workspace
            mountPath: /workspace

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: copy-model
        nodeSelector:
         {{ .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
         {{ .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          image: "{{`{{workflow.parameters.docker_repo}}`}}/fusion-recommender:{{`{{workflow.parameters.rec_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.default | toYaml | nindent 12  }}

          command: [sh, -c]
          args: ["cp -r /src/working_dir/models/use_multilingual_v3 /workspace/models/"]

          volumeMounts:
          - name: workspace
            mountPath: /workspace

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: write-job-configs
        nodeSelector:
         {{ .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
         {{ .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          # Using fusion-recommender image to make sure the right user is used
          image: "{{`{{workflow.parameters.docker_repo}}`}}/fusion-recommender:{{`{{workflow.parameters.rec_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.default | toYaml | nindent 12  }}

          command: [sh, -c]
          args: ["echo '{{`{{workflow.parameters.config_json}}`}}' > /workspace/configs/config.json; cat /workspace/configs/config.json; ls -lr /workspace"]

          volumeMounts:
          - name: workspace
            mountPath: /workspace

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: write-io-configs
        nodeSelector:
         {{ .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
         {{ .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          # Using fusion-recommender image to make sure the right user is used
          image: "{{`{{workflow.parameters.docker_repo}}`}}/fusion-recommender:{{`{{workflow.parameters.rec_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.default | toYaml | nindent 12  }}

          command: [sh, -c]
          args: ["echo '{{`{{workflow.parameters.config_io_json}}`}}' > /workspace/configs/io_config.json; cat /workspace/configs/io_config.json; ls -lr /workspace"]

          volumeMounts:
          - name: workspace
            mountPath: /workspace

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: add-zkHost
        nodeSelector:
          {{ .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
          {{ .Values.tolerations.default | toYaml | nindent 10  }}
        script:
          # Using fusion-recommender image to make sure the right user is used
          image: "{{`{{workflow.parameters.docker_repo}}`}}/fusion-recommender:{{`{{workflow.parameters.rec_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.default  | toYaml | nindent 12  }}

          command: [python]
          source: |
            import json
            with open('/workspace/configs/io_config.json', 'r') as f:
                data = json.load(f)
            keys = ['pullConfig', 'pushConfig', 'removeConfig']
            for key in keys:
                if key in data:
                    for config in data[key]:
                        config['zkHost'] = "{{`{{workflow.parameters.zkhost}}`}}"
            with open('/workspace/configs/io_config.json', 'w') as f:
                json.dump(data, f)

          volumeMounts:
          - name: workspace
            mountPath: /workspace

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: pull-data
        nodeSelector:
         {{ .Values.nodeSelector.content.etl | default .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
         {{ .Values.tolerations.content.etl | default .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          image: "{{`{{workflow.parameters.docker_repo}}`}}/spark-solr-etl:{{`{{workflow.parameters.spark_solr_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.content.etl | default .Values.resources.default | toYaml | nindent 12  }}

          args: ["pull",
                 "/workspace/configs/io_config.json",
                 "/workspace/input/content.parquet"
          ]

{{- if $tlsEnabled }}
          env:
            - name: "JAVA_TOOL_OPTIONS"
              value: "-Djavax.net.ssl.trustStore=/etc/ssl/truststore/truststore.jks -Djavax.net.ssl.trustStorePassword={{ .Values.tls.keystorePassword }} -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=/etc/ssl/truststore/keystore.jks -Dzookeeper.ssl.trustStore.location=/etc/ssl/truststore/truststore.jks -Dzookeeper.ssl.keyStore.password={{ .Values.tls.keystorePassword }} -Dzookeeper.ssl.trustStore.password={{ .Values.tls.keystorePassword }}"
{{- end }}
          volumeMounts:
          - name: workspace
            mountPath: /workspace
{{ if $tlsEnabled }}
          - name: "fusion-truststore"
            mountPath: "/etc/ssl/truststore"
{{ end }}

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: pull-data-cloud
        nodeSelector:
         {{ .Values.nodeSelector.content.etl | default .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
         {{ .Values.tolerations.content.etl | default .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          image: "{{`{{workflow.parameters.docker_repo}}`}}/spark-solr-etl:{{`{{workflow.parameters.spark_solr_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.content.etl | default .Values.resources.default | toYaml | nindent 12  }}

          args: ["pull",
                 "/workspace/configs/io_config.json",
                 "/workspace/input/content.parquet"
          ]

{{- if $tlsEnabled }}
          env:
            - name: "JAVA_TOOL_OPTIONS"
              value: "-Djavax.net.ssl.trustStore=/etc/ssl/truststore/truststore.jks -Djavax.net.ssl.trustStorePassword={{ .Values.tls.keystorePassword }} -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=/etc/ssl/truststore/keystore.jks -Dzookeeper.ssl.trustStore.location=/etc/ssl/truststore/truststore.jks -Dzookeeper.ssl.keyStore.password={{ .Values.tls.keystorePassword }} -Dzookeeper.ssl.trustStore.password={{ .Values.tls.keystorePassword }}"
{{- end }}
          volumeMounts:
          - name: workspace
            mountPath: /workspace
{{ if $tlsEnabled }}
          - name: "fusion-truststore"
            mountPath: "/etc/ssl/truststore"
{{ end }}
          - name: cloud-secret
            mountPath: "/etc/secrets"
            readOnly: true

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: train
        nodeSelector:
         {{ .Values.nodeSelector.content.train | default .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
         {{ .Values.tolerations.content.train | default .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          image: "{{`{{workflow.parameters.docker_repo}}`}}/fusion-recommender:{{`{{workflow.parameters.rec_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.content.train | default .Values.resources.default | toYaml | nindent 12  }}

          args: ["run_content_based",
                 "{{`{{workflow.parameters.job_run_id}}`}}",
                 "/src/working_dir/configs/config.json",
                 "content.parquet"
          ]

          volumeMounts:
          - name: workspace
            mountPath: /src/working_dir

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: push-content
        nodeSelector:
         {{ .Values.nodeSelector.content.etl | default .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
         {{ .Values.tolerations.content.etl | default .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          image: "{{`{{workflow.parameters.docker_repo}}`}}/spark-solr-etl:{{`{{workflow.parameters.spark_solr_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.content.etl | default .Values.resources.default | toYaml | nindent 12  }}

          args: ["push",
                 "/workspace/configs/io_config.json",
                 "/workspace/output/cb_item_item_recommendations.parquet"
          ]
{{- if $tlsEnabled }}
          env:
            - name: "JAVA_TOOL_OPTIONS"
              value: "-Djavax.net.ssl.trustStore=/etc/ssl/truststore/truststore.jks -Djavax.net.ssl.trustStorePassword={{ .Values.tls.keystorePassword }} -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=/etc/ssl/truststore/keystore.jks -Dzookeeper.ssl.trustStore.location=/etc/ssl/truststore/truststore.jks -Dzookeeper.ssl.keyStore.password={{ .Values.tls.keystorePassword }} -Dzookeeper.ssl.trustStore.password={{ .Values.tls.keystorePassword }}"
{{- end }}
          volumeMounts:
          - name: workspace
            mountPath: /workspace
{{ if $tlsEnabled }}
          - name: "fusion-truststore"
            mountPath: "/etc/ssl/truststore"
{{ end }}

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: push-content-cloud
        nodeSelector:
         {{ .Values.nodeSelector.content.etl | default .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
         {{ .Values.tolerations.content.etl | default .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          image: "{{`{{workflow.parameters.docker_repo}}`}}/spark-solr-etl:{{`{{workflow.parameters.spark_solr_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.content.etl | default .Values.resources.default | toYaml | nindent 12  }}

          args: ["push",
                 "/workspace/configs/io_config.json",
                 "/workspace/output/cb_item_item_recommendations.parquet"
          ]
{{- if $tlsEnabled }}
          env:
            - name: "JAVA_TOOL_OPTIONS"
              value: "-Djavax.net.ssl.trustStore=/etc/ssl/truststore/truststore.jks -Djavax.net.ssl.trustStorePassword={{ .Values.tls.keystorePassword }} -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=/etc/ssl/truststore/keystore.jks -Dzookeeper.ssl.trustStore.location=/etc/ssl/truststore/truststore.jks -Dzookeeper.ssl.keyStore.password={{ .Values.tls.keystorePassword }} -Dzookeeper.ssl.trustStore.password={{ .Values.tls.keystorePassword }}"
{{- end }}
          volumeMounts:
          - name: workspace
            mountPath: /workspace
{{ if $tlsEnabled }}
          - name: "fusion-truststore"
            mountPath: "/etc/ssl/truststore"
{{ end }}
          - name: cloud-secret
            mountPath: "/etc/secrets"
            readOnly: true

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: add-default-exclude-query
        nodeSelector:
          {{ .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
          {{ .Values.tolerations.default | toYaml | nindent 10 }}
        script:
          # Using fusion-recommender image to make sure the right user is used
          image: "{{`{{workflow.parameters.docker_repo}}`}}/fusion-recommender:{{`{{workflow.parameters.rec_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.default | toYaml | nindent 12  }}

          command: [python]
          source: |
            import json
            with open('/workspace/configs/io_config.json', 'r') as f:
                data = json.load(f)
            for config in data["removeConfig"]:
              config["excludeQuery"] = "jobId:{{`{{workflow.parameters.job_run_id}}`}}"
            with open('/workspace/configs/io_config.json', 'w') as f:
                json.dump(data, f)

          volumeMounts:
          - name: workspace
            mountPath: /workspace

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"

      - name: delete-old-content-recommendations
        nodeSelector:
         {{ .Values.nodeSelector.content.etl | default .Values.nodeSelector.default | toYaml | nindent 10  }}
        tolerations:
         {{ .Values.tolerations.content.etl | default .Values.tolerations.default | toYaml | nindent 10  }}
        container:
          image: "{{`{{workflow.parameters.docker_repo}}`}}/spark-solr-etl:{{`{{workflow.parameters.spark_solr_tag}}`}}"
          imagePullPolicy: "{{`{{workflow.parameters.image_pull_policy}}`}}"
          resources:
            {{ .Values.resources.default | toYaml | nindent 12  }}

          args: ["remove",
                 "/workspace/configs/io_config.json"
          ]
{{- if $tlsEnabled }}
          env:
            - name: "JAVA_TOOL_OPTIONS"
              value: "-Djavax.net.ssl.trustStore=/etc/ssl/truststore/truststore.jks -Djavax.net.ssl.trustStorePassword={{ .Values.tls.keystorePassword }} -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=/etc/ssl/truststore/keystore.jks -Dzookeeper.ssl.trustStore.location=/etc/ssl/truststore/truststore.jks -Dzookeeper.ssl.keyStore.password={{ .Values.tls.keystorePassword }} -Dzookeeper.ssl.trustStore.password={{ .Values.tls.keystorePassword }}"
{{ end }}
          volumeMounts:
          - name: workspace
            mountPath: /workspace
{{- if $tlsEnabled }}
          - name: "fusion-truststore"
            mountPath: "/etc/ssl/truststore"
{{ end }}

        metadata:
          labels:
            app.kubernetes.io/component: ml-service-workflow
            app.kubernetes.io/part-of: fusion
            app.kubernetes.io/instance: "{{ .Release.Name }}"
