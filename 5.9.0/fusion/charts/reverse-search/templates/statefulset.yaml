{{- $tlsEnabled := ( eq (include "fusion.tls.enabled" .) "true" ) -}}
{{- range $i, $nodePool := .Values.nodePools }}

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ include "reverse-search.fullname" $ }}{{- if not (eq $nodePool.name "") -}}-{{- end -}}{{ $nodePool.name }}"
  labels:
{{ include "reverse-search.common.labels" $ | indent 4 }}
    app.kubernetes.io/component: "reverse-search"
    app.kubernetes.io/reverse-searchpool: "{{ $nodePool.name }}"
  annotations:
{{- toYaml ( $nodePool.annotations | default $.Values.annotations ) | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ include "reverse-search.name" $ }}"
      app.kubernetes.io/instance: "{{ $.Release.Name }}"
      app.kubernetes.io/component: "reverse-search"
      app.kubernetes.io/reverse-searchpool: "{{ $nodePool.name }}"
  serviceName: "{{ include "reverse-search.fullname" $ }}{{- if not (eq $nodePool.name "") -}}-{{- end -}}{{ $nodePool.name }}-headless"
  replicas: {{ $nodePool.replicaCount | default $.Values.replicaCount }}
  updateStrategy: {{ toYaml ($nodePool.updateStrategy | default $.Values.updateStrategy) | nindent 4}}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ include "reverse-search.name" $ }}"
        app.kubernetes.io/instance: "{{ $.Release.Name }}"
        app.kubernetes.io/component: "reverse-search"
        app.kubernetes.io/reverse-searchpool: "{{ $nodePool.name }}"
      annotations:
{{ toYaml ( $nodePool.podAnnotations | default $.Values.podAnnotations ) | indent 8 }}
    spec:
      serviceAccountName: "{{ $.Values.rbac.serviceAccountName | default (include "reverse-search.fullname" $) }}"
    {{- if or $nodePool.nodeSelector $.Values.nodeSelector }}
      nodeSelector: {{ toYaml ($nodePool.nodeSelector | default $.Values.nodeSelector) | nindent 8 }}
    {{- end }}
      imagePullSecrets: {{ $.Values.image.imagePullSecrets | toYaml | nindent 12 }}
      {{- if ($nodePool.priorityClassName | default $.Values.priorityClassName) }}
      priorityClassName: "{{ ($nodePool.priorityClassName | default $.Values.priorityClassName) }}"
      {{- end }}
      {{- if ($nodePool.tolerations | default $.Values.tolerations) }}
      tolerations: {{ toYaml ($nodePool.tolerations | default $.Values.tolerations) | nindent 8 }}
      {{- end }}
      {{- if ($nodePool.schedulerName | default $.Values.schedulerName) }}
      schedulerName: {{ ($nodePool.schedulerName | default $.Values.schedulerName) | quote }}
      {{- end }}
      securityContext:
        fsGroup: {{ $.Values.securityContext.fsGroup }}
        runAsUser: {{ $.Values.securityContext.runAsUser }}
      affinity:
{{ tpl (toYaml ($nodePool.affinity | default $.Values.affinity)) $  | indent 8 }}
      terminationGracePeriodSeconds: {{ $.Values.terminationGracePeriodSeconds }}
      volumes:
        - name: entrypoint-initdb
          configMap:
            name: {{ include "reverse-search.configmap-name" $ }}-initdb
            defaultMode: 0777
        - name: kafka-producer-props
          configMap:
            name: {{ include "reverse-search.configmap-name" $ }}

{{- if $tlsEnabled }}
{{ $params := dict "Release" $.Release "global" $.Values.global "tls" $.Values.tls  "keytoolUtils" $.Values.keytoolUtils }}
{{ include "fusion.tls.volumes" $params | indent 8 }}
{{- end }}
{{- if $.Values.additionalVolumes }}
        {{ toYaml $.Values.additionalVolumes | nindent 8 }}
{{- end }}
{{- if $.Values.config.reversesearchxml}}
        - name: solr-xml
          configMap:
            name: {{ template "reverse-search.configmap-name" $ }}-xml
            items:
            - key: solr.xml
              path: solr.xml
{{- end }}
      initContainers:
{{- if $.Values.setAvailabilityZone }}
        - name: set-reverse-search-zone
          image: {{ $.Values.initContainer.image.solrzoneImageName }}
          resources: {{ toYaml $.Values.initContainer.resources | nindent 12 }}
          command:
            - '/bin/bash'
            - '-c'
            - |
              #!/bin/bash -e

              echo "${NODE_NAME}"
              if kubectl get node "${NODE_NAME}"; then
                topology_zone=$(kubectl get node "${NODE_NAME}" -o jsonpath='{.metadata.labels.topology\.kubernetes\.io/zone}')
                if [[ "${topology_zone}" == "" ]]; then
                  topology_zone=$(kubectl get node "${NODE_NAME}" -o jsonpath='{.metadata.labels.failure-domain\.beta\.kubernetes\.io/zone}')
                fi
                if [[ "${topology_zone}" == "" ]]; then
                  echo "Zone could not be found from label, not setting"
                else
                  echo "export SOLR_OPTS=\"\${SOLR_OPTS} -Dsolr_zone=${topology_zone}\"" > /mnt/shared/zone.sh
                fi
              else
                echo "Unable to fetch node information"
              fi

          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: shared
              mountPath: /mnt/shared
{{- end }}
{{- if $tlsEnabled -}}
{{- $sep:= "" -}}
{{- if not (eq $nodePool.name "" ) -}}
{{- $sep = "-" -}}
{{- end }}
{{- $params := dict "Release" $.Release "global" $.Values.global "tls" $.Values.tls "tlsServiceName" ( printf "%s%s%s-headless" (include "reverse-search.fullname" $) $sep ($nodePool.name) )  "keytoolUtils" $.Values.keytoolUtils  "additionalServices" (list ( include "reverse-search.service-name" $ )) "securityContext" $.Values.securityContext }}
{{- include "fusion.tls.init-container-v2" $params | nindent 8 }}
{{- end }}
        - name: check-zk
          image: {{ $.Values.initContainer.image.repository }}/check-fusion-dependency:v1.2.0
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            privileged: false
            runAsUser: {{ $.Values.securityContext.runAsUser }}
          args:
            - zookeeper
          resources:
            requests:
              cpu: 200m
              memory: 50Mi
            limits:
              cpu: 200m
              memory: 50Mi
          env:
            - name: ZOOKEEPER_CONNECTION_STRING
              value: {{ include "fusion.zkConnectionString" $ }}
            - name: CHECK_INTERVAL
              value: {{ $.Values.zkInitCheckInterval | default "5s" }}
            - name: CHECK_TIMEOUT
              value: {{ $.Values.zkInitCheckTimeout | default "2s" }}
            - name: TIMEOUT
              value: {{ $.Values.zkInitTimeout | default "2m" }}
        {{- if $tlsEnabled }}
            - name: ADDITIONAL_CA_CERTIFICATE
              value: "/tls/ca.crt"
            - name: "TLS_ENABLED"
              value: "true"
          volumeMounts:
            - name: keystore-volume
              mountPath: /tls
        {{- end }}
{{- if $tlsEnabled }}
        - name: "enable-tls-in-reverse-search"
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
          imagePullPolicy: "{{ $.Values.image.pullPolicy }}"
          resources: {{ toYaml $.Values.initContainer.resources | nindent 12 }}
          command:
            - "sh"
            - "-c"
            - |
              /opt/solr/server/scripts/cloud-scripts/zkcli.sh -zkhost "{{ template "fusion.zkSolrConnectionString" $ }}" -cmd clusterprop -name urlScheme -val https
          env:
            - name: "JAVA_TOOL_OPTIONS"
              value: "-Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=/tls/keystore.jks -Dzookeeper.ssl.trustStore.location=/tls/truststore.jks -Dzookeeper.ssl.keyStore.password={{ $.Values.tls.keystorePassword }} -Dzookeeper.ssl.trustStore.password={{ $.Values.tls.keystorePassword }}"
          volumeMounts:
            - name: keystore-volume
              mountPath: /tls
{{ end }}

{{- if $.Values.additionalInitContainers }}
        {{ toYaml $.Values.additionalInitContainers | nindent 8 }}
{{- end }}
      containers:
        - name: reverse-search
          image: "{{ $.Values.image.repository }}/{{ $.Values.image.name }}:{{ $.Values.image.tag }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          resources: {{ toYaml ($nodePool.resources| default $.Values.resources) | nindent 12 }}
          ports:
          - containerPort: {{ $.Values.port }}
            name: solr-client
          env:
{{- if  ($nodePool.solrGcTune| default $.Values.solrGcTunes) }}
            - name: "GC_TUNE"
              value: "{{ ($nodePool.solrGcTune| default $.Values.solrGcTune) }}"
{{- end }}
            - name: "SOLR_OPTS"
              value: "{{ if (or ($nodePool.nodeType) ($.Values.nodeType)) }}-Dnode_type={{ $nodePool.nodeType | default $.Values.nodeType }} {{ end }}{{ if not (or ($nodePool.disableNodeType) (eq $nodePool.name "")) }}-D{{ $.Values.nodePoolIdentifier}}={{ $nodePool.name }} {{ end }}{{ $nodePool.solrOpts | default $.Values.solrOpts }} {{- if $tlsEnabled }} -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=/etc/ssl/keystores/keystore.jks -Dzookeeper.ssl.trustStore.location=/etc/ssl/keystores/truststore.jks -Dzookeeper.ssl.keyStore.password={{ $.Values.tls.keystorePassword }} -Dzookeeper.ssl.trustStore.password={{ $.Values.tls.keystorePassword }} {{- end }}"
            - name: "OOM"
              value: "{{ $.Values.memoryBehavior }}"
            - name: "SOLR_JAVA_MEM"
              value: "{{ $nodePool.javaMem | default $.Values.javaMem }}"
            - name: "SOLR_HOME"
              value: "/var/solr/data"
            - name: "SOLR_PORT"
              value: "{{ $.Values.port }}"
            - name: "POD_HOSTNAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: "SOLR_HOST"
              value: "$(POD_HOSTNAME).{{ include "reverse-search.fullname" $ }}{{- if not (eq $nodePool.name "") -}}-{{- end -}}{{ $nodePool.name }}-headless{{ if not ( eq $.Values.serviceDnsName "" ) }}.{{ $.Release.Namespace }}.{{ $.Values.serviceDnsName }}{{ end }}"
            - name: "ZK_HOST"
              value: "{{ template "fusion.zkSolrConnectionString" $ }}"
            - name: "SOLR_LOG_LEVEL"
              value: "{{ $nodePool.logLevel | default $.Values.logLevel }}"
            - name: "SOLR_JAVA_STACK_SIZE"
              value: "{{ $.Values.solrJavaStackSize }}"
            - name: SOLR_REQUESTLOG_ENABLED
              value: "{{ $.Values.solrRequestLogEnabled }}"
{{- if $.Values.solrModules }}
            - name: SOLR_MODULES
              value: {{ $.Values.solrModules }}
{{- end }}
{{ if $tlsEnabled }}
            - name: "SOLR_SSL_ENABLED"
              value: "true"
            - name: "SOLR_SSL_KEY_STORE"
              value: "/etc/ssl/keystores/keystore.jks"
            - name: "SOLR_SSL_KEY_STORE_PASSWORD"
              value: "{{ $.Values.tls.keystorePassword }}"
            - name: "SOLR_SSL_TRUST_STORE"
              value: "/etc/ssl/keystores/truststore.jks"
            - name: "SOLR_SSL_TRUST_STORE_PASSWORD"
              value: "{{ $.Values.tls.keystorePassword }}"
            - name: "SOLR_SSL_WANT_CLIENT_AUTH"
              value: "{{ $.Values.tls.wantClientAuth }}"
            - name: "SOLR_SSL_NEED_CLIENT_AUTH"
              value: "{{ $.Values.tls.needClientAuth }}"
            - name: "SOLR_SSL_CHECK_PEER_NAME"
              value: "{{ $.Values.tls.checkPeerName }}"
{{ end }}
          livenessProbe:
            initialDelaySeconds: {{ $.Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ $.Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ $.Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ $.Values.livenessProbe.failureThreshold }}
            httpGet:
              scheme: "{{ $tlsEnabled | ternary "HTTPS" "HTTP" }}"
              path: /solr/admin/info/health
              port: {{ $.Values.port }}
          readinessProbe:
            initialDelaySeconds: {{ $.Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ $.Values.readinessProbe.periodSeconds }}
            timeoutSeconds:  {{ $.Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ $.Values.readinessProbe.successThreshold }}
            failureThreshold: {{ $.Values.readinessProbe.failureThreshold }}
            httpGet:
              scheme: "{{ $tlsEnabled | ternary "HTTPS" "HTTP" }}"
              path: /solr/admin/info/health
              port: {{ $.Values.port }}
          volumeMounts:
            - name: {{ template "reverse-search.pvc-name" $ }}{{- if not (eq $nodePool.name "") -}}-{{- end -}}{{ $nodePool.name }}
              mountPath: /var/solr/data
            - name: entrypoint-initdb
              mountPath: /docker-entrypoint-initdb.d
            - name: kafka-producer-props
              mountPath: /opt/solr/modules/fusion-reverse-search/lib/resources
{{- if $.Values.additionalVolumeMounts }}
        {{ toYaml $.Values.additionalVolumeMounts | nindent 12 }}
{{- end }}

{{- if $.Values.config.solrxml }}
            - name: solr-xml
              mountPath: /opt/solr/server/solr/solr.xml
              subPath: solr.xml
{{- end }}
{{ if $tlsEnabled }}
            - name: "keystore-volume"
              mountPath: "/etc/ssl/keystores"
{{ end }}
  volumeClaimTemplates:
    - metadata:
        name: {{ template "reverse-search.pvc-name" $ }}{{- if not (eq $nodePool.name "") -}}-{{- end -}}{{ $nodePool.name }}
        annotations:
          pv.beta.kubernetes.io/gid: "{{ $.Values.securityContext.fsGroup }}"
      spec:
        accessModes:
{{ toYaml $.Values.volumeClaimTemplates.accessModes | indent 10 }}
{{- if not ( eq ( $nodePool.storageClassName | default $.Values.volumeClaimTemplates.storageClassName ) "" ) }}
        storageClassName: "{{ $nodePool.storageClassName | default $.Values.volumeClaimTemplates.storageClassName }}"
{{- end }}
        resources:
          requests:
            storage: {{ $nodePool.storageSize | default $.Values.volumeClaimTemplates.storageSize }}

{{- end -}}
