{{- $tlsEnabled := ( eq (include "fusion.tls.enabled" .) "true" ) -}}
{{- $jsonOutput := ( eq (include "fusion.loggingJSONOutput" .) "true" ) }}

kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ template "fusion.async-parsing.fullname" . }}
  labels:
{{ include "fusion.async-parsing.labels" . | indent 4 }}
  annotations:
{{ toYaml .Values.annotations | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: "{{ .Release.Name }}"
      app.kubernetes.io/component: "{{ .Values.component }}"
      app.kubernetes.io/part-of: "fusion"
  serviceName: {{ include "fusion.async-parsing.serviceName" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/component: "{{ .Values.component }}"
        app.kubernetes.io/part-of: "fusion"
      annotations:
        {{ toYaml .Values.pod.annotations | nindent 8 }}
    spec:
{{- if .Values.securityContext }}
      securityContext:
{{- .Values.securityContext | toYaml | nindent 8 }}
{{- end }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
        {{ toYaml .Values.nodeSelector | nindent 8 }}
    {{- end }}
    {{- if .Values.affinity }}
      affinity:
        {{ tpl (toYaml .Values.affinity) . | nindent 8 }}
    {{- end }}
      serviceAccountName: "{{ .Values.rbac.serviceAccountName | default ( include "fusion.async-parsing.fullname" . ) }}"
      {{ if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
      {{ end }}
      {{ if .Values.tolerations }}
      tolerations: {{ .Values.tolerations | toYaml | nindent 8 }}
      {{ end }}
      {{ if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{ end }}
      {{ if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{ end }}
      imagePullSecrets:
{{ toYaml .Values.image.imagePullSecrets | indent 8 }}
      initContainers:
{{- if $tlsEnabled -}}
{{ $params := dict "tlsServiceName" ( include "fusion.async-parsing.serviceName" . ) "Release" .Release "global" .Values.global "tls" .Values.tls  "keytoolUtils" .Values.keytoolUtils "securityContext" $.Values.securityContext }}
{{ include "fusion.tls.init-container-v2" $params | indent 8 }}
{{- end }}
      containers:
      - name: tika-server
        image: "{{ .Values.tikaImage.repository }}/{{ .Values.tikaImage.name }}:{{ .Values.tikaImage.tag }}"
        imagePullPolicy: "{{ .Values.tikaImage.pullPolicy }}"
        ports:
          - name: http
            containerPort: {{ .Values.port.internal }}
            protocol: TCP
        livenessProbe:
          initialDelaySeconds: {{ .Values.tika.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.tika.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.tika.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.tika.livenessProbe.failureThreshold }}
          httpGet:
            path: /status
            port: {{ .Values.port.internal }}
        readinessProbe:
          initialDelaySeconds: {{ .Values.tika.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.tika.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.tika.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.tika.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.tika.readinessProbe.failureThreshold }}
          httpGet:
            path: /status
            port: {{ .Values.port.internal }}
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          privileged: false
        command:
          - /bin/sh
          - -c
          - exec java -jar /tika-server-standard-2.6.0.jar -h 0.0.0.0 $0 $@
          - -c /config/tika-config.xml
        volumeMounts:
          - name: tmp
            mountPath: /tmp
          - name: tika-server-config
            mountPath: "config"
            readOnly: true
          - name: log4j2
            mountPath: "log4j2"
            readOnly: true
          - name: logs
            mountPath: "{{ .Values.tika.config.log.dir }}"
        resources:
          limits:
            cpu: "{{ .Values.tika.resources.limits.cpu }}"
            memory: "{{ .Values.tika.resources.limits.memory }}"
          requests:
            cpu: "{{ .Values.tika.resources.requests.cpu }}"
            memory: "{{ .Values.tika.resources.requests.memory }}"
      - name: async-parsing
        image: "{{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          privileged: false
        env:
          - name: "COMPONENT"
            value: "async-parsing"
          - name: "KAFKA_BOOTSTRAP-SERVERS"
            value: {{ include "fusion.fusion-async-parsing.kafkaBrokers" . }}
          - name: SPRING_PROFILES_ACTIVE
            value: {{ .Values.springProfiles }}{{- if $tlsEnabled }},tls{{- end }}{{- if $jsonOutput }},logjson{{- end }}
          - name: JAVA_TOOL_OPTIONS
            value: "-Dspring.cloud.kubernetes.secrets.paths=/etc/secrets {{ .Values.javaToolOptions }}
{{- if $tlsEnabled }} -Dlogging.config=classpath:logback-kube-tls.xml {{- else }} -Dlogging.config=classpath:logback-kube.xml {{- end }}
{{- if $tlsEnabled }} -Djavax.net.ssl.trustStore=/etc/ssl/keystores/truststore.jks -Djavax.net.ssl.trustStorePassword={{ .Values.tls.keystorePassword }} -Djavax.net.ssl.trustStoreType=PKCS12 -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=/etc/ssl/keystores/keystore.jks -Dzookeeper.ssl.trustStore.location=/etc/ssl/keystores/truststore.jks -Dzookeeper.ssl.keyStore.password={{ .Values.tls.keystorePassword }} -Dzookeeper.ssl.trustStore.password={{ .Values.tls.keystorePassword }}{{- end -}}
"
        ports:
          - containerPort: {{ .Values.port.external }}
            name: http
        livenessProbe:
          initialDelaySeconds: {{ .Values.asyncParsing.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.asyncParsing.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.asyncParsing.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.asyncParsing.livenessProbe.failureThreshold }}
          httpGet:
            path: "/actuator/health"
            port: {{ .Values.port.external }}
{{- if $tlsEnabled }}
            scheme: HTTPS
{{- end }}
        readinessProbe:
          initialDelaySeconds: {{ .Values.asyncParsing.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.asyncParsing.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.asyncParsing.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.asyncParsing.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.asyncParsing.readinessProbe.failureThreshold }}
          httpGet:
            path: "/actuator/health"
            port: {{ .Values.port.external }}
{{- if $tlsEnabled }}
            scheme: HTTPS
{{- end }}
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep {{ .Values.preStopSleepTime }}"]
        volumeMounts:
          - name: {{ .Values.volume.claimName }}
            mountPath: /workdir/async-parsing
          - name: application-config-k8s
            mountPath: "app/config"
            readOnly: true
          - name: logs
            mountPath: "{{ .Values.logdir }}"
          - name: tmp
            mountPath: /tmp
          - name: secrets
            mountPath: "/etc/secrets"
            readOnly: true
{{- if $.Values.additionalVolumeMounts }}
        {{ toYaml $.Values.additionalVolumeMounts | nindent 10 }}
{{- end }}
{{- if $tlsEnabled }}
          - name: "keystore-volume"
            mountPath: "/etc/ssl/keystores"
{{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 10 }}
      volumes:
        - name: secrets
          projected:
            sources:
            - secret:
                name: service-account-key
                items:
                  - key: sa
                    path: service-account-key
        - name: logs
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: application-config-k8s
          configMap:
            name: {{ template "fusion.async-parsing.fullname" . }}
            items:
              - key: application-k8s.yml
                path: application-k8s.yml
        - name: tika-server-config
          configMap:
            name: "{{ template "fusion.async-parsing.fullname" . }}-tika-server-config"
            items:
              - key: tika-config.xml
                path: tika-config.xml
        - name: log4j2
          configMap:
            name: "{{ template "fusion.async-parsing.fullname" . }}-tika-server-log4j2"
            items:
              - key: log4j2.xml
                path: log4j2.xml
{{- if $.Values.additionalVolumes }}
    {{ toYaml $.Values.additionalVolumes | nindent 8 }}
{{- end }}
{{- if $tlsEnabled }}
{{ $params := dict "tlsServiceName" ( include "fusion.async-parsing.serviceName" . ) "Release" .Release "global" .Values.global "tls" .Values.tls  "keytoolUtils" .Values.keytoolUtils }}
{{ include "fusion.tls.volumes" $params | indent 8 }}
{{- end }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Values.volume.claimName }}
    spec:
      accessModes:
        - {{ .Values.volume.accessMode }}
{{- if not ( kindIs "invalid" .Values.volume.storageClassName ) }}
      storageClassName: "{{ .Values.volume.storageClassName }}"
{{- end }}
      resources:
        requests:
          storage: {{ .Values.volume.storage }}
