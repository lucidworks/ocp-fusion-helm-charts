---
{{- $tlsEnabled := ( eq (include "fusion.tls.enabled" .) "true" ) -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fusion.rules-ui.fullname" .  }}
  labels:
    {{ include "fusion.rules-ui.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  {{- if .Values.deploymentStrategy }}
  strategy:
    {{ toYaml .Values.deploymentStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: "rules-ui"
      app.kubernetes.io/part-of: "fusion"
  template:
    metadata:
      name: {{ include "fusion.rules-ui.fullname" .  }}
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: "rules-ui"
        app.kubernetes.io/part-of: "fusion"
    spec:
{{- if .Values.securityContext }}
      securityContext:
{{- .Values.securityContext | toYaml | nindent 8 }}
{{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
        - name: "nginx-config"
          configMap:
            name: "{{ template "fusion.rules-ui.fullname" . }}"
{{- if $tlsEnabled }}
{{ $params := dict "tlsServiceName" ( include "fusion.rules-ui.serviceName" . ) "Release" $.Release "global" $.Values.global "tls" $.Values.tls  "keytoolUtils" $.Values.keytoolUtils }}
{{ include "fusion.tls.volumes" $params | indent 8 }}
{{- end }}
      serviceAccountName: "{{ .Values.rbac.serviceAccountName | default ( include "fusion.rules-ui.fullname" . ) }}"
    {{- if .Values.nodeSelector }}
      nodeSelector:
        {{ toYaml .Values.nodeSelector | nindent 8 }}
    {{- end }}
    {{- if .Values.affinity }}
      affinity:
        {{ tpl (toYaml .Values.affinity) . | nindent 8 }}
    {{- end }}
      imagePullSecrets: {{ toYaml .Values.image.imagePullSecrets | nindent 8 }}
      {{ if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
      {{ end }}
      {{ if .Values.tolerations }}
      tolerations: {{ .Values.tolerations | toYaml | nindent 8 }}
      {{ end }}
      {{ if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{ end }}
      {{ if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{ end }}
{{- if $tlsEnabled }}
      initContainers:
{{ $params := dict "tlsServiceName" ( include "fusion.rules-ui.serviceName" . ) "Release" $.Release "global" $.Values.global "tls" $.Values.tls  "keytoolUtils" $.Values.keytoolUtils "securityContext" $.Values.securityContext}}
{{ include "fusion.tls.init-container-v2" $params | indent 8 }}
{{- end }}
      containers:
      - name: rules-ui
        image: "{{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.imagePullPolicy }}"
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          privileged: false
{{- .Values.containersSecurityContext | toYaml | nindent 10 }}
        # args:
        #   -
        ports:
          - containerPort: {{ .Values.service.http.targetPort }}
            name: "jetty"
        volumeMounts:
          - name: tmp
            mountPath: /tmp
          - name: "nginx-config"
            mountPath: "/etc/nginx/conf.d"
{{- if $tlsEnabled }}
          - name: "keystore-volume"
            mountPath: "/etc/ssl/fusion_certs"
{{- end }}

        # livenessProbe:
        #   initialDelaySeconds: 20
        #   periodSeconds: 10
        #   httpGet:
        #     path: /actuator/health
        #     port: jetty
        resources:
          {{ toYaml .Values.resources | nindent 10 }}
