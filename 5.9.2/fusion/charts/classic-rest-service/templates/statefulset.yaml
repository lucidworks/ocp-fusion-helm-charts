{{- $tlsEnabled := include "fusion.tls.enabled" $ -}}
{{- $jsonOutput := ( eq (include "fusion.loggingJSONOutput" .) "true" ) }}
{{- $logstashHost := (include "fusion.logstashHost" .) -}}
{{- $importTrustedCertsEnabled := (default .Values.trustedCertificates.enabled false) -}}

kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ template "fusion.classic-rest-service.fullname" . }}
  labels:
{{ include "fusion.classic-rest-service.labels" . | indent 4 }}
  annotations:
{{ toYaml .Values.annotations | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: "{{ .Release.Name }}"
      app.kubernetes.io/component: "{{ .Values.component }}"
      app.kubernetes.io/part-of: "fusion"
  serviceName: {{ include "fusion.classic-rest-service.serviceName" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/component: "{{ .Values.component }}"
        app.kubernetes.io/part-of: "fusion"
      annotations:
        {{ toYaml .Values.pod.annotations | nindent 8 }}
    spec:
{{- if .Values.securityContext }}
      securityContext:
{{- .Values.securityContext | toYaml | nindent 8 }}
{{- end }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
        {{ toYaml .Values.nodeSelector | nindent 8 }}
    {{- end }}
    {{- if .Values.affinity }}
      affinity:
        {{ tpl (toYaml .Values.affinity) . | nindent 8 }}
    {{- end }}
      serviceAccountName: "{{ .Values.rbac.serviceAccountName | default ( include "fusion.classic-rest-service.fullname" . ) }}"
      {{ if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
      {{ end }}
      {{ if .Values.tolerations }}
      tolerations: {{ .Values.tolerations | toYaml | nindent 8 }}
      {{ end }}
      {{ if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{ end }}
      {{ if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{ end }}
      imagePullSecrets:
{{ toYaml .Values.image.imagePullSecrets | indent 8 }}
      initContainers:
{{- if $tlsEnabled -}}
{{ $params := dict "tlsServiceName" ( include "fusion.classic-rest-service.serviceName" . ) "Release" .Release "global" .Values.global "tls" .Values.tls  "keytoolUtils" .Values.keytoolUtils "securityContext" $.Values.securityContext }}
{{ include "fusion.tls.init-container-v2" $params | indent 8 }}
{{- end }}
        {{- include "fusion.initContainers.checkZk-v2" . | nindent 8 }}
        {{- include "fusion.initContainers.checkAdmin-v2" . | nindent 8 }}
        {{- include "fusion.initContainers.checkIndexing" . | nindent 8 }}
{{- if $importTrustedCertsEnabled }}
        - name: import-certs
          image: "{{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
          command:
            - 'sh'
            - '-c'
            - |
              set -e

              {{ if $tlsEnabled  }}
              DEST_TRUSTSTORE="/etc/ssl/keystores/truststore.jks"

              # Import additional certs into truststore
              {{- range $key, $val := .Values.trustedCertificates.files }}
              keytool -importcert \
                -keystore ${DEST_TRUSTSTORE} \
                -storepass {{ $.Values.tls.keystorePassword }} \
                -alias imported-{{ $key }} \
                -file /etc/ssl/certificates/custom/{{ $key }} \
                -noprompt
              {{- end }}

              {{ else }}
              SRC_TRUSTSTORE="/usr/local/openjdk-11/lib/security/cacerts"
              DEST_TRUSTSTORE="/tmp/truststore/truststore.jks"

              # Import cacerts into new .jks in writable location
              keytool -importkeystore \
                -srckeystore ${SRC_TRUSTSTORE} \
                -srcstorepass changeit \
                -destkeystore ${DEST_TRUSTSTORE} \
                -storepass changeit \
                -noprompt

              # Import additional certs there
              {{- range $key, $val := .Values.trustedCertificates.files }}
              keytool -importcert \
                -keystore ${DEST_TRUSTSTORE} \
                -storepass changeit \
                -alias imported-{{ $key }} \
                -file /etc/ssl/certificates/custom/{{ $key }} \
                -noprompt
              {{- end }}
              {{ end }}
          volumeMounts:
            - name: certs
              mountPath: /etc/ssl/certificates/custom
              readOnly: true
{{- if $tlsEnabled }}
            - name: "keystore-volume"
              mountPath: "/etc/ssl/keystores"
{{ else }}
            - name: truststore
              mountPath: /tmp/truststore
              readOnly: false
{{- end }}
{{- end }}
      containers:
      - name: classic-rest-service
        image: "{{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          privileged: false
        env:
          - name: "COMPONENT"
            value: "connectors-classic"
          - name: SPRING_PROFILES_ACTIVE
            value: {{ .Values.springProfiles }}{{- if $tlsEnabled }},tls{{- end }}{{- if $jsonOutput }},logjson{{- end }}{{- if $logstashHost }},logstash{{- end }}
          - name: JAVA_TOOL_OPTIONS
            value: "-Dspring.cloud.kubernetes.secrets.paths=/etc/secrets {{ .Values.javaToolOptions }}
{{- if $tlsEnabled }} -Dlogging.config=classpath:logback-kube-tls.xml {{- else }} -Dlogging.config=classpath:logback-kube.xml {{- end }}
{{- if ( and $importTrustedCertsEnabled ( not $tlsEnabled )) }} -Djavax.net.ssl.trustStore=/etc/ssl/truststore/truststore.jks -Djavax.net.ssl.trustStorePassword=changeit -Djavax.net.ssl.trustStoreType=PKCS12{{- end -}}
{{- if $tlsEnabled }} -Djavax.net.ssl.trustStore=/etc/ssl/keystores/truststore.jks -Djavax.net.ssl.trustStorePassword={{ .Values.tls.keystorePassword }} -Djavax.net.ssl.trustStoreType=PKCS12 -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=/etc/ssl/keystores/keystore.jks -Dzookeeper.ssl.trustStore.location=/etc/ssl/keystores/truststore.jks -Dzookeeper.ssl.keyStore.password={{ .Values.tls.keystorePassword }} -Dzookeeper.ssl.trustStore.password={{ .Values.tls.keystorePassword }}{{- end -}}
"
          {{ if $logstashHost }}
          - name: LOGSTASH_HOST
            value: "{{ $logstashHost }}"
          {{ end }}
        ports:
          - containerPort: {{ .Values.port.external }}
            name: http
        livenessProbe:
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          httpGet:
            path: "/actuator/health"
            port: {{ .Values.port.external }}
{{- if $tlsEnabled }}
            scheme: HTTPS
{{- end }}
        readinessProbe:
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          httpGet:
            path: "/actuator/health"
            port: {{ .Values.port.external }}
{{- if $tlsEnabled }}
            scheme: HTTPS
{{- end }}
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep {{ .Values.preStopSleepTime }}"]
        volumeMounts:
          - name: {{ .Values.volume.claimName }}
            mountPath: /classic/data
          - name: application-config-k8s
            mountPath: "app/config"
            readOnly: true
          - name: logs
            mountPath: "{{ .Values.logdir }}"
          - name: work-dir
            mountPath: "/classic/apps/connectors/connectors-classic"
          - name: tmp
            mountPath: /tmp
          - name: secrets
            mountPath: "/etc/secrets"
            readOnly: true
{{- if $.Values.additionalVolumeMounts }}
        {{ toYaml $.Values.additionalVolumeMounts | nindent 10 }}
{{- end }}
{{- if $tlsEnabled }}
          - name: "keystore-volume"
            mountPath: "/etc/ssl/keystores"
{{- end }}
{{- if ( and $importTrustedCertsEnabled ( not $tlsEnabled )) }}
          - name: "truststore"
            mountPath: "/etc/ssl/truststore"
{{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 10 }}
      volumes:
        - name: secrets
          projected:
            sources:
            - secret:
                name: service-account-key
                items:
                  - key: sa
                    path: service-account-key
{{- if ( and $importTrustedCertsEnabled ( not $tlsEnabled )) }}
        - name: truststore
          emptyDir: {}
{{- end }}
        - name: logs
          emptyDir: {}
        - name: work-dir
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: application-config-k8s
          configMap:
            name: {{ template "fusion.classic-rest-service.fullname" . }}
            items:
              - key: application-k8s.yml
                path: application-k8s.yml
{{- if $importTrustedCertsEnabled }}
        - name: certs
          secret:
            secretName: custom-trusted-certs-secret-classic
{{- end }}
{{- if $.Values.additionalVolumes }}
    {{ toYaml $.Values.additionalVolumes | nindent 8 }}
{{- end }}
{{- if $tlsEnabled }}
{{ $params := dict "tlsServiceName" ( include "fusion.classic-rest-service.serviceName" . ) "Release" .Release "global" .Values.global "tls" .Values.tls  "keytoolUtils" .Values.keytoolUtils }}
{{ include "fusion.tls.volumes" $params | indent 8 }}
{{- end }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Values.volume.claimName }}
    spec:
      accessModes:
        - {{ .Values.volume.accessMode }}
{{- if not ( kindIs "invalid" .Values.volume.storageClassName ) }}
      storageClassName: "{{ .Values.volume.storageClassName }}"
{{- end }}
      resources:
        requests:
          storage: {{ .Values.volume.storage }}
